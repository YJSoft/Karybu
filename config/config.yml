parameters:
    charset: UTF-8

services:
    cms.config.locator: { class: 'Karybu\Config\ConfigLocator' }
    cms.router.loader: { class: 'Karybu\Routing\Loader\YamlFileLoader', arguments: [ @cms.config.locator ] }
    context: { class: 'Symfony\Component\Routing\RequestContext' }
    cms.router: { class: 'Karybu\Routing\Router', arguments: [ @cms.router.loader, @context, null, '%kernel.debug%' ] }
    cms.context.instance: { class: 'ContextInstance', arguments: [ null, null, null, @cms.router ] }
    cms.display_handler: { class: 'DisplayHandler', calls: [[setGlobalGzEncoding, ['%cms.gz_encoding%']]] }
    cms.mobile.instance: { class: 'MobileInstance' }
    cms.file_handler.instance: { class: 'FileHandlerInstance' }

    cms.validator: { class: 'Validator' }
    cms.validator_session: {class: 'Karybu\Validator\ValidatorSession', arguments: [@cms.context.instance] }

    listener.router: { class: 'Karybu\EventListener\RouterListener', arguments: [ @cms.router ] }
    listener.response: { class: 'Symfony\Component\HttpKernel\EventListener\ResponseListener', arguments: [ '%charset%' ] }
    listener.cms:
        class: 'Karybu\EventListener\CMSListener'
        arguments: [ @cms.context.instance, @cms.display_handler, @cms.mobile.instance, @cms.file_handler.instance ]
        calls:
            - [ setContainer, [@service_container] ] # so that each listener method will be able to access the container
    listener.validator: { class: 'Karybu\EventListener\ValidatorListener', arguments: [ @cms.validator, @cms.validator_session ] }
    listener.addons: { class: 'Karybu\EventListener\AddonListener', arguments: [ @cms.mobile.instance ] }

    dispatcher:
        class: 'Symfony\Component\EventDispatcher\EventDispatcher'
        calls:
            - [addSubscriber, [@listener.router]]
            - [addSubscriber, [@listener.cms]]
            - [addSubscriber, [@listener.validator]]
            - [addSubscriber, [@listener.response]]
            - [addSubscriber, [@listener.addons]]

    resolver: { class: 'Karybu\HttpKernel\Controller\ControllerResolver' }

    twig.loader: { class: 'Twig_Loader_Filesystem', arguments: ['%kernel.root_dir%common/tpl'] }
    twig.function.breadcrums: {class: 'Karybu\Twig\SimpleFunction\Breadcrumbs'}
    twig.extension.karybu:
        class: 'Karybu\Twig\Extension\Cms'
        arguments: [@service_container]
        tags:
            - { name: twig.extension }

    twig.environment:
        class: 'Karybu\Twig\Environment'
        arguments: [ @twig.loader ]
        calls:
            - [setDebug, ['%kernel.debug%']]
            - [setCache, ['%kernel.root_dir%files/cache/twig']]
            - [addExtension, [@twig.extension.karybu]]
            - [addFunction, [@twig.function.breadcrums]]

    http_kernel:
        class: 'Karybu\HttpKernel\HttpKernel'
        arguments: [@dispatcher, @resolver]
        calls:
            - [setDebug, ['%kernel.debug%']]
